call plug#begin('~/.vim/plugged')

Plug 'joshdick/onedark.vim'

Plug 'StanAngeloff/php.vim'

Plug 'chiel92/vim-autoformat'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'preservim/nerdtree'

Plug 'christoomey/vim-tmux-navigator'

Plug 'jiangmiao/auto-pairs'

Plug 'Yggdroot/indentLine'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'tpope/vim-commentary'

Plug 'frazrepo/vim-rainbow'

Plug 'ryanoasis/vim-devicons'
Plug 'github/copilot.vim'

call plug#end()

set mouse=a
set clipboard=unnamed
set showcmd
set ruler
set encoding=UTF-8
set sw=2
set noshowmode
set cursorline

filetype plugin indent on

set number
set relativenumber

nmap <C-s> :w<CR>
nmap <C-w> :q!<CR>
nmap <C-m> :wq<CR>

nmap <C-p> :bprev<CR>
nmap <C-o> :bnext<CR>

colorscheme onedark

let g:onedark_termcolors=256

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:airline_powerline_fonts = 1

let g:airline_theme='onedark'

autocmd vimenter * NERDTree
syntax on

map <C-n> :NERDTreeToggle<CR>

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let NERDTreeQuitOnOpen = 1

"AutoCommands
autocmd BufWrite *.html :CocCommand prettier.formatFile
autocmd BufWrite *.css :CocCommand prettier.formatFile
autocmd BufWrite *.js :CocCommand prettier.formatFile
autocmd BufWrite *.ts :CocCommand prettier.formatFile

autocmd BufWrite *.php :Autoformat

let g:python_host_prog="/path/to/python/executable/"

let g:autoformat_autoindent = 1
let g:autoformat_retab = 1
let g:autoformat_remove_trailing_spaces = 1

set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c

if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif
"
" lightline
let g:lightline = {
      \ 'active': {
        \   'left': [
          \     [ 'mode', 'paste' ],
          \     [ 'ctrlpmark', 'git', 'diagnostic', 'cocstatus', 'filename', 'method' ]
          \   ],
          \   'right':[
          \     [ 'filetype', 'fileencoding', 'lineinfo', 'percent' ],
          \     [ 'blame' ]
          \   ],
          \ },
          \ 'component_function': {
            \   'blame': 'LightlineGitBlame',
            \ }
            \ }

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction

set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}

let g:rainbow_active = 1
